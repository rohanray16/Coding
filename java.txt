import javax.crypto.Cipher;
import javax.crypto.spec.SecretKeySpec;
import java.util.Base64;
import javax.crypto.spec.IvParameterSpec;

public class Decryptor {
    public static String decrypt(String encrypted, String key) throws Exception {
        byte[] keyBytes = key.getBytes();
        SecretKeySpec secretKey = new SecretKeySpec(keyBytes, "AES");
        Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5PADDING");

        // Assuming that the IV is not passed along with the encrypted data, it needs to be set manually or handled appropriately
        byte[] iv = new byte[cipher.getBlockSize()];
        IvParameterSpec ivParams = new IvParameterSpec(iv);

        cipher.init(Cipher.DECRYPT_MODE, secretKey, ivParams);
        byte[] decodedValue = Base64.getDecoder().decode(encrypted);
        byte[] decryptedVal = cipher.doFinal(decodedValue);
        return new String(decryptedVal);
    }

    public static void main(String[] args) {
        try {
            String secretKey = "your-secret-key"; // Must be exactly 16 chars (or adjust cipher spec)
            String encryptedPassword = "encrypted-string-from-typescript";
            String decryptedPassword = decrypt(encryptedPassword, secretKey);
            System.out.println("Decrypted Password: " + decryptedPassword);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
